@page "/"
@using AutoML.CodeGenerator.Core
@using AutoML.CodeGenerator.Core.CodeGeneration
@using AutoML.CodeGenerator.Core.Data
@using AutoML.CodeGenerator.Csv
@inject CsvToMetadataQuery csvToMetadata
@inject AutoMLCodeQuery autoMLCodeGenerator
@inject GenerateInputModelCodeQuery generateInputModelCode
@inject GenerateOutputModelCodeQuery generateOutputModelCode
@inject DetermineColumnDefinitionsCommand determineColumnDefinitions
@inject GenerateAutoMLTrainingSampleQuery generateAutoMlTrainingSample
@inject GenerateAutoMLConsumingSampleQuery generateAutoMlConsumingSample

<h1>Generate multi-classification AutoML code (<a href="https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet">ML.NET</a> 1.3+)!</h1>

<br />
<h2>CSV (headers only)</h2>

Enter CSV headers (comma separated) which will be used to generate the columns.

<input type="text" @bind-value="@csv" style="width: 80%" />
<button class="btn btn-primary" @onclick="ReadCsv">Read CSV</button>

@if (metadata != null)
{
    <br />
    <h2>Parameters for code generation</h2>

    <b>Column definitions:</b>

    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>ML Type</th>
            </tr>
        </thead>
        @foreach (var def in metadata.ColumnDefinitions)
        {
            <tr>
                <td>@def.Name</td>
                <td>
                    <select id="select-box" @bind="@def.MLType">
                        <option value=@ColumnMLType.Categorical>Categorical (hash)</option>
                        <option value=@ColumnMLType.Text>Text (tokenization)</option>
                        <option value=@ColumnMLType.Numeric>Numeric</option>
                        <option value=@ColumnMLType.Label>Label (predicted value)</option>
                        <option value=@ColumnMLType.Ignored>Ignored</option>
                        <option value=@ColumnMLType.ExampleWeight>Example Weight</option>
                        <option value=@ColumnMLType.SamplingKey>Sampling key</option>
                    </select>
                </td>
            </tr>
        }
    </table>

    <br />
    <b>Code namespaces:</b>

    <div>
        <label>Models namespace: </label>
        <input type="text" @bind-value="@modelsNamespace" />
    </div>

    <div>
        <label>Sample training namespace: </label>
        <input type="text" @bind-value="@trainingNamespace" />
    </div>

    <div>
        <label>Sample consumption namespace: </label>
        <input type="text" @bind-value="@consumptionNamespace" />
    </div>

    <button class="btn btn-primary" @onclick="GenerateCode">Generate code</button>
}

@if (!string.IsNullOrWhiteSpace(autoMLCode))
{
    <hr />
    <br />

    <h2>Required Nuget packages</h2>

    <ul>
        <li>Microsoft.ML (1.3.1+)</li>
        <li>Microsoft.ML.AutoML (0.15.1+)</li>
    </ul>

    <h2>AutoML code:</h2>

    <b>Namespaces</b>

<pre><code>
using Microsoft.ML;
using Microsoft.ML.AutoML;
</code></pre>

    <b>C# method:</b>

<pre><code>@autoMLCode</code></pre>

    <h2>InputModel code:</h2>

<pre><code>@inputModelCode</code></pre>

    <h2>OutputModel code:</h2>

<pre><code>@outputModelCode</code></pre>

    <h2>Sample Console training app</h2>

<pre><code>@sampleTrainingCode</code></pre>

    <h2>Sample Console consumption app</h2>

<pre><code>@sampleConsumingCode</code></pre>

<br />

}

@code {
    string csv = "Description,Category";
    string autoMLCode = string.Empty;
    string inputModelCode = string.Empty;
    string outputModelCode = string.Empty;
    string modelsNamespace = "AutoMLSample.Models";
    string trainingNamespace = "AutoMLSample.ML";
    string consumptionNamespace = "AutoMLSample.App";
    string sampleTrainingCode = string.Empty;
    string sampleConsumingCode = string.Empty;
    ImportMetadata metadata;
    void ReadCsv()
    {
        metadata = csvToMetadata.Execute(csv);
        determineColumnDefinitions.Execute(metadata);

        metadata.ColumnDefinitions.Last().MLType = ColumnMLType.Label;
        autoMLCode = string.Empty;
        inputModelCode = string.Empty;
    }

    void GenerateCode()
    {
        autoMLCode = autoMLCodeGenerator.Execute(metadata);
        inputModelCode = generateInputModelCode.Execute("ModelInput", modelsNamespace, metadata.ColumnDefinitions);
        outputModelCode = generateOutputModelCode.Execute("ModelOutput", modelsNamespace, metadata.ColumnDefinitions);
        sampleTrainingCode = generateAutoMlTrainingSample.Execute(metadata, trainingNamespace, modelsNamespace);
        sampleConsumingCode = generateAutoMlConsumingSample.Execute(metadata, consumptionNamespace, modelsNamespace);
    }
}
